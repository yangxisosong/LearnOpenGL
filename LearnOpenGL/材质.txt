    // 环境光(最暗处的颜色)
    //float ambientStrength = 0.1f;
    //vec3 ambient = light.ambient * material.ambient;
    //增加贴图

    vec3 ambient  = light.ambient  * vec3(texture(material.diffusetexure, TexCoord));

    // 漫反射（光照和法线计算漫反射）
    vec3 norm = normalize(Normal);
    //入射光线
    vec3 lightDir = normalize(light.position - FragPos);//-light.lightDir;

    //点光源
    float dist=length(light.position - FragPos);
    float attenuation = 1.0/(light.constant+light.linear*dist+light.quadratic*(dist*dist));

    float diff = max(dot(norm, lightDir), 0.0);
    //vec3 diffuse = (diff * material.diffuse) * light.diffuse;
    vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffusetexure, TexCoord));

    // 镜面反射
    //float specularStrength = 0.5f;
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    //vec3 specular = (spec * material.specular) * light.specular; 
    vec3 specular = light.specular * spec * vec3(texture(material.speculartexure, TexCoord));

    //vec3 result = (ambient + diffuse + specular) * objectColor;
    //vec3 result = (ambient + diffuse) * objectColor;

    //聚光
    float cosTheta = dot(normalize(FragPos-light.position),-1*lightDir);
    if(cosTheta>light.cosPhy){
     color = vec4(ambient + (diffuse + specular)*attenuation, 1.0f);
    }
    else{
       color = vec4(ambient * objectColor, 1.0f);
    }

    //color = vec4(ambient + diffuse + specular, 1.0f); 
    //点光
    //color = vec4(ambient + (diffuse + specular)*attenuation, 1.0f);



    *-----------------------------------------------

